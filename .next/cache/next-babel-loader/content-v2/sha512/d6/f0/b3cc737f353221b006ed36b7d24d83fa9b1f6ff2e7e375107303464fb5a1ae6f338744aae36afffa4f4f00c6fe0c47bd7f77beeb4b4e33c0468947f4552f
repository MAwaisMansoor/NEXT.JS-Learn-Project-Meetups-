{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/gosaas/nextjs-learn/pages/[meetupId]/index.js\",\n    _this = this;\n\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { Fragment } from \"react\";\nimport Head from \"next/head\";\n\nvar MeetupDetails = function MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Meetup Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: \"This is the meetup details page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }, _this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      title: props.meetupData.title,\n      image: props.meetupData.image,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 12\n  }, _this);\n}; //needed for getStaticProps\n\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["/home/gosaas/nextjs-learn/pages/[meetupId]/index.js"],"names":["MeetupDetail","Fragment","Head","MeetupDetails","props","meetupData","title","image","address","description"],"mappings":";;;;;AACA,OAAOA,YAAP,MAAyB,uCAAzB;AAEA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AACA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAE7B,sBAAO,QAAC,QAAD;AAAA,4BACH,QAAC,IAAD;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,eAEI;AAAM,QAAA,IAAI,EAAC,aAAX;AACI,QAAA,OAAO,EAAC;AADZ;AAAA;AAAA;AAAA;AAAA,eAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,aADG,eAMH,QAAC,YAAD;AACA,MAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KADxB;AAEA,MAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAFxB;AAGA,MAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH1B;AAIA,MAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJ9B;AAAA;AAAA;AAAA;AAAA,aANG;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AAaH,CAfD,C,CAiBA;;;KAjBMN,a;;AAiEN,eAAeA,aAAf","sourcesContent":["\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport { Fragment } from \"react\";\nimport Head from \"next/head\";\nconst MeetupDetails = (props) => {\n\n    return <Fragment>\n        <Head>\n            <title>Meetup Details</title>\n            <meta name=\"description\"\n                content=\"This is the meetup details page\" />\n        </Head>\n        <MeetupDetail    \n        title={props.meetupData.title}\n        image={props.meetupData.image}\n        address={props.meetupData.address}\n        description={props.meetupData.description} \n    />\n    </Fragment>\n}\n\n//needed for getStaticProps\nexport async function getStaticPaths() {\n    const client = await MongoClient.connect(\"mongodb+srv://awais:donlyawais@cluster0.bkx35.mongodb.net/meetups?retryWrites=true&w=majority\");\n\n    const db = client.db();\n\n    const meetupCollection = db.collection('meetups');\n\n    const meetups = await meetupCollection.find({}, { _id: 1 }).toArray();\n\n    client.close();\n\n    return {\n        paths: meetups.map(meetup => ({\n            params: {\n                meetupId: meetup._id.toString()\n            }\n        })),\n        fallback: false\n    }\n}\n\nexport async function getStaticProps(context){\n    const meetupId = context.params.meetupId;\n\n    const client = await MongoClient.connect(\"mongodb+srv://awais:donlyawais@cluster0.bkx35.mongodb.net/meetups?retryWrites=true&w=majority\");\n\n    const db = client.db();\n\n    const meetupCollection = db.collection('meetups');\n\n    const selectedMeetup = await meetupCollection.findOne({ _id: ObjectId(meetupId) });\n\n    client.close();\n\n    return {\n        props: {\n            meetupData: {\n                id: selectedMeetup._id.toString(),\n                title: selectedMeetup.title,\n                image: selectedMeetup.image,\n                address: selectedMeetup.address,\n                description: selectedMeetup.description\n            }\n        }\n    }\n}\n\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}