{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/gosaas/nextjs-learn/pages/index.js\";\n//domain/\n//if import is part of getStaticProps or getSerSideProps it will not be a part of bundle         \nimport { MongoClient } from 'mongodb';\nimport MeetupList from '../components/meetups/MeetupList';\n\nfunction HomePage(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupList, {\n    meetups: props.meetups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 12\n  }, this);\n} //only be created in pages\n//can be async\n//this will run on server after deployment\n//cant set revalidate because it will run on every request\n// export async function getServerSideProps(context){\n//     //const {req, res} = context;\n//     return {\n//         props: {\n//             meetups: DUMMY_MEETUPS\n//         }\n//     }\n// }\n//reserved name, if nextjs finds it renders during pre-rendering process\n//this code never executes on client side\n//it executes during built process\n\n\nexport async function getStaticProps() {\n  //always need to return an object\n  //revalidate get seconds of what it will wait for before rendering\n  const client = await MongoClient.connect(\"mongodb+srv://awais:donlyawais@cluster0.bkx35.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupCollection = db.collection('meetups');\n  const meetups = await meetupCollection.find().toArray();\n  client.close();\n  return {\n    props: {\n      meetups: meetups.map(meetup => ({\n        title: meetup.title,\n        image: meetup.image,\n        address: meetup.address,\n        id: meetup._id.toString()\n      }))\n    },\n    revalidate: 1\n  };\n}\nexport default HomePage;","map":{"version":3,"sources":["/home/gosaas/nextjs-learn/pages/index.js"],"names":["MongoClient","MeetupList","HomePage","props","meetups","getStaticProps","client","connect","db","meetupCollection","collection","find","toArray","close","map","meetup","title","image","address","id","_id","toString","revalidate"],"mappings":";;AAAA;AAEA;AACA,SAASA,WAAT,QAA4B,SAA5B;AAEA,OAAOC,UAAP,MAAuB,kCAAvB;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACrB,sBAAO,QAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,C,CAED;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACnC;AACA;AAEA,QAAMC,MAAM,GAAG,MAAMN,WAAW,CAACO,OAAZ,CAAoB,+FAApB,CAArB;AAEA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AAEA,QAAMN,OAAO,GAAG,MAAMK,gBAAgB,CAACE,IAAjB,GAAwBC,OAAxB,EAAtB;AAEAN,EAAAA,MAAM,CAACO,KAAP;AAEA,SAAO;AACHV,IAAAA,KAAK,EAAE;AACHC,MAAAA,OAAO,EAAEA,OAAO,CAACU,GAAR,CAAYC,MAAM,KAAK;AAC5BC,QAAAA,KAAK,EAAED,MAAM,CAACC,KADc;AAE5BC,QAAAA,KAAK,EAAEF,MAAM,CAACE,KAFc;AAG5BC,QAAAA,OAAO,EAAEH,MAAM,CAACG,OAHY;AAI5BC,QAAAA,EAAE,EAAEJ,MAAM,CAACK,GAAP,CAAWC,QAAX;AAJwB,OAAL,CAAlB;AADN,KADJ;AASHC,IAAAA,UAAU,EAAE;AATT,GAAP;AAWH;AAED,eAAepB,QAAf","sourcesContent":["//domain/\n\n//if import is part of getStaticProps or getSerSideProps it will not be a part of bundle         \nimport { MongoClient } from 'mongodb';\n\nimport MeetupList from '../components/meetups/MeetupList'; \n\nfunction HomePage(props) {\n    return <MeetupList meetups={props.meetups} />\n}\n\n//only be created in pages\n//can be async\n\n//this will run on server after deployment\n//cant set revalidate because it will run on every request\n// export async function getServerSideProps(context){\n//     //const {req, res} = context;\n\n//     return {\n//         props: {\n//             meetups: DUMMY_MEETUPS\n//         }\n//     }\n// }\n\n//reserved name, if nextjs finds it renders during pre-rendering process\n//this code never executes on client side\n//it executes during built process\nexport async function getStaticProps() {\n    //always need to return an object\n    //revalidate get seconds of what it will wait for before rendering\n\n    const client = await MongoClient.connect(\"mongodb+srv://awais:donlyawais@cluster0.bkx35.mongodb.net/meetups?retryWrites=true&w=majority\");\n\n    const db = client.db();\n\n    const meetupCollection = db.collection('meetups');\n\n    const meetups = await meetupCollection.find().toArray();\n\n    client.close();\n\n    return {\n        props: {\n            meetups: meetups.map(meetup => ({\n                title: meetup.title,\n                image: meetup.image,\n                address: meetup.address,\n                id: meetup._id.toString(),\n            }))\n        },\n        revalidate: 1\n    }\n}\n\nexport default HomePage;"]},"metadata":{},"sourceType":"module"}